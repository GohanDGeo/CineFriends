{
  "openapi": "3.0.1",
  "info": {
    "title": "Project CineFriends (Binge)",
    "description": "Project CineFriends, also known as Binge, is a social network for movie enthusiasts.",
    "contact": {
      "email": "dimosthenis.p@skgcode.gr"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/api"
    }
  ],
  "tags": [
    {
      "name": "signup",
      "description": "Signup operation"
    },
    {
      "name": "signin",
      "description": "Signin operation"
    },
    {
      "name": "signout",
      "description": "Signout operation"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "posts",
      "description": "Operations about user posts"
    },
    {
      "name": "test",
      "description": "Internal testing of API"
    }
  ],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "signup"
        ],
        "summary": "Register a new user to the app",
        "description": "Add a non-existing user to the DB",
        "operationId": "signup",
        "requestBody": {
          "description": "Properties that need to be sent for user creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Signup is successful! Please log-in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "[\"Name is required!\", \"Email should be between 7 to 32 characters!\", \"Email must contain the @ character\", \"Password is required!\", \"Password should be between 8 to 32 characters!\", \"Password must contain a number!\"]",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Email is taken!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "signin"
        ],
        "summary": "User signin",
        "description": "Signin with existing email and password",
        "operationId": "signin",
        "requestBody": {
          "description": "Properties that need to be sent for user signin",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SinginResponse"
                }
              }
            }
          },
          "400": {
            "description": "[\"Email should be between 7 to 32 characters!\", \"Please type your valid email address!\", \"Password is required!\", \"Your password is invalid!\"]",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "[\"User with that email does not exist! Please signup.\", \"Email and password do not match!\"]",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/signout": {
      "get": {
        "tags": [
          "signout"
        ],
        "summary": "User signout",
        "description": "Deletes the JWT cookie from the client side, thus signing out the user",
        "operationId": "signout",
        "responses": {
          "200": {
            "description": "Signout was successful!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "Get all the users from the DB",
        "operationId": "allUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a specific user",
        "description": "Get a specific user from the DB",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificUser"
                }
              }
            }
          },
          "400": {
            "description": "User not found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a specific user",
        "description": "Update a specific user in the DB",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Properties that need to be sent for user update",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Name"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedUser"
                }
              }
            }
          },
          "400": {
            "description": "User not found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to perform this action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a specific user",
        "description": "Delete a specific user from the DB",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "User not found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to perform this action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/posts/new/{userId}": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Create a new user post",
        "description": "Send a user's post to the DB",
        "operationId": "createPost",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Properties that need to be sent for post creation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "[\"You must write a body for user post!\", \"Body must be between 4 to 2000 characters!\"]",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/posts/by/{userId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get all posts from a specific user",
        "description": "Get all posts for a specific user from the DB",
        "operationId": "postsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllPostsResponse"
                }
              }
            }
          },
          "400": {
            "description": "User not found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/posts/{postId}": {
      "get": {
        "tags": [
          "posts"
        ],
        "summary": "Get a single post with a specific postId",
        "description": "Get all posts for a specific user from the DB",
        "operationId": "singlePost",
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "ID of a post as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SinglePostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/test": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get dummy data",
        "description": "Get some dummy data (stored in the app) from the server",
        "operationId": "getTest",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingResponse"
                }
              }
            }
          }
        }
      }
    },
    "/test-authentication": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get dummy data if authenticated",
        "description": "Get some dummy data (stored in the app) from the server only when signed in (having a JWT token)",
        "operationId": "uploadFile",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    },
    "/test-authorization/{userId}": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Get dummy data if authenticated and authorized",
        "description": "Get some dummy data (stored in the app) from the server only when signed in (having a JWT token) and authorized (sending the same user id as a parameter, as the id in the JWT token)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user as stored in the DB",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestingResponse"
                }
              }
            }
          },
          "400": {
            "description": "User not found!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "User is not authorized to perform this action!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt_token": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserInfo"
          }
        ]
      },
      "SpecificUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          }
        ]
      },
      "UpdatedUser": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/SpecificUser"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "UserSignup": {
        "required": [
          "email",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "NewPost": {
        "required": [
          "body"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "example": "This is my first post!"
          }
        }
      },
      "CreatePostResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SinglePostResponse"
          }
        ]
      },
      "SinglePostResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid"
          },
          "body": {
            "type": "string",
            "example": "This is my first post!"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "example": "2020-02-10T13:20:15.424Z"
          }
        }
      },
      "AllPostsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "created": {
              "type": "string",
              "format": "date-time",
              "example": "2020-02-10T13:20:15.424Z"
            },
            "postedBy": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string",
                  "example": "John"
                }
              }
            }
          }
        }
      },
      "SinginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eiJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1Zjg5OWUwZmY2NmQ5ZZA0MmNjNjRmMmYiLCJpYXQiOjE2MDMyMTk0NjJ9.CgF9j-1dDumCDU2AELnKrzox6HxK-O8H2ezxw8DlnYM"
          },
          "user": {
            "$ref": "#/components/schemas/UserInfo"
          }
        }
      },
      "StandardApiResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "StandardErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "TestingResponse": {
        "type": "object",
        "properties": {
          "test_data": {
            "type": "array",
            "example": [
              {
                "user_1": "John Doe"
              },
              {
                "user_2": "George Smith"
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "user_1": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Johny"
          }
        }
      },
      "Email": {
        "maximum": 32,
        "minimum": 7,
        "pattern": "/^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/",
        "type": "string",
        "format": "email",
        "example": "john@gmail.com"
      },
      "Password": {
        "maximum": 32,
        "minimum": 8,
        "pattern": "/\\d/",
        "type": "string",
        "format": "password",
        "example": "Testing_password1"
      }
    },
    "securitySchemes": {
      "jwt_token": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}